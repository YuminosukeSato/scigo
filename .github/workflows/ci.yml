name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# 並列実行を設定
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # コードフォーマットとリントチェック
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0
    
    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m ./...
    
    - name: Check go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  # テストの実行とカバレッジ測定
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ['1.23']
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
        cache: true
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -func=coverage.out
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-${{ matrix.os }}
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Run benchmarks
      if: matrix.os == 'ubuntu-latest'
      run: |
        go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt
    
    - name: Upload benchmark results
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt

  # セキュリティスキャン
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
    
    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
    
    - name: Run gosec
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -fmt json -out gosec-report.json ./... || true
    
    - name: Upload gosec results
      uses: actions/upload-artifact@v4
      with:
        name: gosec-report
        path: gosec-report.json
    
    - name: Run nancy (check dependencies)
      run: |
        go list -json -deps ./... | docker run --rm -i sonatypecorp/nancy:latest sleuth || true

  # ビルドチェック
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build -v -o goml-${{ matrix.goos }}-${{ matrix.goarch }} ./...
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: goml-${{ matrix.goos }}-${{ matrix.goarch }}
        path: goml-${{ matrix.goos }}-${{ matrix.goarch }}

  # 統合チェック（全てのジョブが成功したか確認）
  integration:
    name: Integration Check
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: always()
    
    steps:
    - name: Check if all jobs passed
      run: |
        if [ "${{ needs.lint.result }}" != "success" ] || \
           [ "${{ needs.test.result }}" != "success" ] || \
           [ "${{ needs.security.result }}" != "success" ] || \
           [ "${{ needs.build.result }}" != "success" ]; then
          echo "One or more jobs failed"
          exit 1
        fi
        echo "All jobs passed successfully!"

  # ドキュメント生成（mainブランチのみ）
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: integration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
    
    - name: Generate godoc
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        # ドキュメント生成のコマンドをここに追加
        echo "Documentation generation would happen here"
    
    - name: Deploy to GitHub Pages
      if: success()
      run: |
        echo "Documentation deployment would happen here"